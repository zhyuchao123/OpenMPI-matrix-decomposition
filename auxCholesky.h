// auxiliary (non-parallel) functions for supporting tiled Cholesky factor.
// written by Peter Strazdins, Feb 20 for COMP4300/8300 Assignment 1 
// v1.0 26/02/20


/**** square tiled algorithm support functions ****/

// returns a, where void a[nT][nT] is an array with element size eltSize, 
// and a[i][j] = 0  
void **allocTileArray(size_t eltSize, int nT);

// frees a, allocated by allocTileArray()
void freeTileArray(void **a);

// pre:  a is an wT x wT array 
//       for clean output format, entries are assumed to be in range 0..99
// post: prints out a; each line is prefixed by id":"
void printIntTile(int id, int wT, int **a);


// sets the number of decimal places to be printed by printDoubleTile() etc
void setPrintDoublePrecision(int decimalPlaces);

// pre: a stores an wT x wT array in row-major order; 
// for clean output format, entries are assumed to be in range (-10,+10)
// post: prints out a as an wT x wT array; ; each line is prefixed by id":"
void printDoubleTile(int id, int wT, double *a);


/**** tiled lower triangular matrix support functions ****/

// pre:  a has storage for an wT x wT array in row-major order; 0 <= i, j <= wT
// post: a[ii*wT+jj] is set to an appropriate value for the global element 
//       (i*wT+ii, j*wT+jj) for an N x N positive definite symmetric matrix 
//       (stored in the lower triangular portion).
//       Elements are random in the range [-1.0,1.0] with a seed 
//       s = s(i*wT+ii,j*wT+jj,seed); 
//       note: a suitable bias added to diagonal elements to make +ve definite
void initLowerPosDefTile(int N, int i, int j, int seed, int wT, double *a);

// post: return the approximate row norm of NxN matrices generated by 
//       initLowerPosDefTile()
double getNrmA(int N);

// prints a global nT*wT x nT*wT tiled array with tile pointers stored in A.
// Whitespace is printed for where tile pointers are null; 
// only lower tri. tiles printed. Each line is prefixed by id":"
// For clean output format, entries are assumed to be in range (-10,+10)
void printLowerTileArray(int id, int nT, int wT, double ***A);


/**** miscellaneous  generic functions ****/

// x[0..N-1] is set to random values in [-1,1], seeded by seed 
void initVec(int seed, double *x, int N); 

// print x[0..N-1] across a line with the label name
void printVec(char *name, double *x, int N); 

